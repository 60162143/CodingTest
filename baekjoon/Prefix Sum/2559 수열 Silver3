
# 문제 : https://www.acmicpc.net/problem/2559

# keyPoint
-- 내가 푼 방법 --
1. 수의 누적합을 계산
2. 구간합으로 각 구간의 최댓갑을 도출

-- 슬라이딩 윈도우 기법 --
1. 최초 0부터 k까지의 합 계산
2. 계산한 구간에서 배열의 오른쪽 값을 더해주고 가장 왼쪽값을 빼주면서 최댓값 계산
3. 교집합의 정보를 공유하고, 차이가 나는 양쪽 끝 원소만 갱신하는 방법

# code
-- 내가 푼 방법 --
from sys import stdin

n, k = map(int, stdin.readline().split())

arr = list(map(int, stdin.readline().split()))
dp = [0 for _ in range(n + 1)]

for i in range(n) :
    dp[i + 1] = dp[i] + arr[i]
    
max_num = -1e9

for i in range(n - k + 1) :
    # print(f"i, j : {i + k, i}")
    max_num = max(max_num, dp[i + k] - dp[i])

print(max_num)

-- 슬라이딩 윈도우 기법 --
from sys import stdin

n, k = map(int, stdin.readline().split())

arr = list(map(int, stdin.readline().split()))

max_sum = sum(arr[:k])
result = max_sum

for i in range(n - k) :
    max_sum += arr[i + k] - arr[i]
    if result < max_sum :
        result = max_sum
        
print(result)
