
# 문제 : https://www.acmicpc.net/problem/1966

# keyPoint
# 1. deque가 list보다 평균 시간복잡도가 더 좋으므로 deque 활용할 것 ( double ended queue )
# 2. Queue 아이디어 활용

# code
from sys import stdin
from collections import deque

t = int(stdin.readline())  # 테스트 케이스 수 입력

for _ in range(t) :
    n, m = map(int, stdin.readline().rstrip().split())  # n, m 입력
    lt = deque(list(map(int, stdin.readline().rstrip().split())))  # 문서의 중요도 deque로 선언
    
    count = 0  # 출력 순서 번호

    # 큐가 비어있지 않을 때까지 반복
    while lt :
        mx = max(lt)  # 중요도 최댓값
        front = lt.popleft()  # 큐의 맨 앞 부분 값
        m -= 1  # 찾을 문서의 현재 위치
        
        if mx == front :  # 중요도 최대값과 맨 앞부분의 값이 같을 경우
            count += 1  # 출력 순서 증가
            
            if m < 0 :  # 현재 위치가 0보다 작을 경우 찾고자 하는 값이 출력됨
                print(count)
                break
        else :  # 최대가 아닌 값인 경우
            lt.append(front)  # 맨 뒤로 추가
            if m < 0 :  # 현재 위치가 0보다 작을 경우 맨 뒤로 이동한거기 때문에 마지막 index 번호로 변경
                m = len(lt) - 1
