
# 문제 : https://www.acmicpc.net/problem/2615

# keyPoint
# 1. 오목인지 판별을 위해 4방향(우상, 우, 우하, 하)을 확인 -> 2차원 배열을 순회하면서 확인하므로 4방향만으로도 모든 방향을 확인할 수 있음
# 2. 기준점부터 4방향을 확인하면서 연속된 돌의 개수가 5개일 경우 오목
# 3. 육목 이상일 경우를 판별하기 위해 기준점부터 반대방향의 돌과 같은 돌일 경우 그 방향은 확인하지 않음 -> 그 방향이 오목일지라도 이전 방향의 돌이 같으면 육목이기 때문
# 4. 출력 후 종료를 원할 시 exit()으로 종료할 수 있음

# code
from sys import stdin

board = [list(stdin.readline().rstrip().split()) for _ in range(19)]  # 바둑판 돌 입력
d = [(-1, 1), (0, 1), (1, 1), (1, 0)]   # 방향 백터(우상, 우, 우하, 하)

for i in range(19) :  # row
    for j in range(19) :  # column
        st = board[i][j]  # 기준점 돌

        if int(st) < 1 :  # 기준점 돌이 0일 경우 돌이 안놓아져 있기 때문에 pass
            continue

        # 4방향 확인
        for k in range(4) :
            # 기준점 돌로부터 진행방향에 4개의 돌이 놓여질 수 없는 경우 pass
            if i + d[k][0] * 4 < 0 or j + d[k][1] * 4 < 0 or i + d[k][0] * 4 >= 19 or j + d[k][1] * 4 >= 19 :
                continue

            # 기준점 돌로부터 진행방향의 반대방향에 돌을 놓을 수 있고 그 돌과 기준점 돌이 같을 경우 pass
            # 반대 방향에 있는 돌과 기준점 돌이 같을 경우 기준점으로부터 진행방향으로 오목이라도 육목이 되기 때문
            if 0 <= i - d[k][0] < 19 and 0 <= j - d[k][1] < 19 and st == board[i - d[k][0]][j - d[k][1]] :
                continue
                
            else :
                l = 1  # 연속된 돌의 개수

                # 기준점 돌과 진행방향으로 가면서 돌이 일치하면 반복
                while st == board[i + d[k][0] * l][j + d[k][1] * l] :
                    l += 1  # 연속된 돌의 개수 증가

                    # 진행방향의 다음 곳에 돌을 놓을 수 있는지 확인후 놓을 수 없으면 break
                    # 진행 방향을 고려하여 열은 +만 되기 때문에 0보다 작은 범위 제외
                    if i + d[k][0] * l < 0 or i + d[k][0] * l > 18 or j + d[k][1] * l > 18 :
                        break

                if l == 5 :  # 오목이 된 경우 값들을 출력하고 종료
                    print(st)
                    print(i + 1, j + 1)
                    exit()
                    
print(0)  # 모든 바둑판을 탐색했지만 종료되지 않은 경우 오목이 없는 경우이므로 0 출력
            
