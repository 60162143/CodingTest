
# 문제 : https://www.acmicpc.net/problem/3085

# keyPoint
# 1. n의 범위가 50까지 이므로 O(n^4)를 해도 1초안에 연산이 가능
# 2. 오른쪽 위부터 하나씩 인접한 곳의 값과 바꿔가면서 완전탐색
# 3. 오른쪽 위부터 아래로 순회하기 때문에 오른쪽과 아래쪽만 바꿔주면서 탐색( 위쪽과 왼쪽은 안봐도 무관, 이미 확인 했기 때문 )

# code
from sys import stdin
n = int(stdin.readline())  # n 입력

board = [list(stdin.readline().rstrip()) for _ in range(n)]  # 보드 배열 입력
mx = 0  # 연속된 값들의 수의 최대값

# 전체 배열을 인접한 곳과 변경하면서 연속된 값들의 수 계산
for i in range(n) :
    for j in range(n - 1) :  # 배열의 인접한 부분을 비교하기 때문에 n - 1
        pre = 0  # 변경 할 값 1
        post = 0  # 변경 할 값 2

        # 행을 기준으로 오른쪽 열의 값과 변경
        # 변경할 값들이 같을 경우 변경하지 않음
        if board[i][j] != board[i][j + 1] :  
            # 값 변경
            pre = board[i][j]
            post = board[i][j + 1]
            board[i][j] = post
            board[i][j + 1] = pre

            # 리스트를 순회하면서 값이 연속됐는지 확인
            for k in range(n) :
                count_width = 1  # 행의 연속된 값의 수
                count_height = 1  # 열의 연속된 값의 수
                for l in range(n - 1) :  # 끝 행 or 끝 열은 비교하지 않아도 되므로 n - 1

                    # 행의 값들이 연속됐는지 확인
                    if board[k][l] == board [k][l + 1] : # 연속됐을 경우
                        count_width += 1
                    else :  # 연속되지 않을 경우
                        mx = max(mx, count_width)  # 현재 최댓값과 연속된 값의 최댓값 계산
                        count_width = 1  # 연속된 값의 수 초기화

                    # 열의 값들이 연속됐는지 확인
                    if board[l][k] == board[l + 1][k] :  # 연속됐을 경우
                        count_height += 1
                    else :  # 연속되지 않을 경우
                        mx = max(mx, count_height)  # 현재 최댓값과 연속된 값의 최댓값 계산
                        count_height = 1  # 연속된 값의 수 초기화
                    
                mx = max(mx, count_width, count_height)  # 연속된 수 최댓값 계산

            # 변경된 값들 초기화
            board[i][j] = pre
            board[i][j + 1] = post

        # 열을 기준으로 아래쪽 행의 값과 변경
        # 변경할 값들이 같을 경우 변경하지 않음
        if board[j][i] != board[j + 1][i] :
            # 값 변경
            pre = board[j][i]
            post = board[j + 1][i]
            board[j][i] = post
            board[j + 1][i] = pre

            # 리스트를 순회하면서 값이 연속됐는지 확인
            for k in range(n) :
                count_width = 1  # 행의 연속된 값의 수
                count_height = 1  # 열의 연속된 값의 수
                for l in range(n - 1) :  # 끝 행 or 끝 열은 비교하지 않아도 되므로 n - 1
                    
                    # 행의 값들이 연속됐는지 확인
                    if board[k][l] == board [k][l + 1] :  # 연속됐을 경우
                        count_width += 1
                    else :  # 연속되지 않을 경우
                        mx = max(mx, count_width)  # 현재 최댓값과 연속된 값의 최댓값 계산
                        count_width = 1  # 연속된 값의 수 초기화

                    # 열의 값들이 연속됐는지 확인
                    if board[l][k] == board[l + 1][k] :  # 연속됐을 경우
                        count_height += 1
                    else :  # 연속되지 않을 경우
                        mx = max(mx, count_height)  # 현재 최댓값과 연속된 값의 최댓값 계산
                        count_height = 1  # 연속된 값의 수 초기화
                        
                mx = max(mx, count_width, count_height)  # 연속된 수 최댓값 계산

            # 변경된 값들 초기화
            board[j][i] = pre
            board[j + 1][i] = post
            
print(mx)  # 최댓값 출력
