
# 문제 : https://www.acmicpc.net/problem/1966

# keyPoint
# 1. deque가 list보다 평균 시간복잡도가 더 좋으므로 deque 활용할 것 ( double ended queue )
# 2. Queue 아이디어 활용

-- 최근 내가 푼 방법 --
1. heapq를 이용하여 최대힙으로 만든 뒤 원소 하나씩 뽑으면서 배열의 값과 비교

# code
★★★★★ 1번 풀이 ★★★★★
from sys import stdin
from collections import deque

t = int(stdin.readline())  # 테스트 케이스 수 입력

for _ in range(t) :
    n, m = map(int, stdin.readline().rstrip().split())  # n, m 입력
    lt = deque(list(map(int, stdin.readline().rstrip().split())))  # 문서의 중요도 deque로 선언
    
    count = 0  # 출력 순서 번호

    # 큐가 비어있지 않을 때까지 반복
    while lt :
        mx = max(lt)  # 중요도 최댓값
        front = lt.popleft()  # 큐의 맨 앞 부분 값
        m -= 1  # 찾을 문서의 현재 위치
        
        if mx == front :  # 중요도 최대값과 맨 앞부분의 값이 같을 경우
            count += 1  # 출력 순서 증가
            
            if m < 0 :  # 현재 위치가 0보다 작을 경우 찾고자 하는 값이 출력됨
                print(count)
                break
        else :  # 최대가 아닌 값인 경우
            lt.append(front)  # 맨 뒤로 추가
            if m < 0 :  # 현재 위치가 0보다 작을 경우 맨 뒤로 이동한거기 때문에 마지막 index 번호로 변경
                m = len(lt) - 1


★★★★★ 2번 풀이 ★★★★★
from sys import stdin
from heapq import heapify, heappop, heappush
from collections import deque

t = int(input())    # 테스트 케이스

for _ in range(t) :
    n, m = map(int, stdin.readline().split())
    
    arr = list(map(int, stdin.readline().split()))    # 리스트 입력
    arr2 = []    # (값, 인덱스) 형태로 저장할 배열

    # 튜플 형태로 값과 index 저장
    for index, item in enumerate(arr) :
        arr2.append((item, index))
    
    queue = deque(arr2)    # queue 형태로 사용하기 위해 deque로 선언
    max_queue = []    # 최대힙을 담을 리스트

    # 최대힙으로 만들기
    for item in arr :
        heappush(max_queue, -item)

    count = 0    # 값을 뺀 횟수
    
    while max_queue :
        max_num = -heappop(max_queue)    # 최댓값 비교하기 위해 값 pop
        
        while max_num != queue[0][0] :    # 큐의 값과 비교하여 같으면 제거 다르면 제거 후 맨 뒤에 다시 추가
            num = queue.popleft()
            queue.append(num)

        else :    # 같을 경우
            num = queue.popleft()
            count += 1    # 뺀 횟수 증가

            if num[1] == m :    뺀 곳의 인덱스가 찾을 위치일 경우
                print(count)
                break
            
