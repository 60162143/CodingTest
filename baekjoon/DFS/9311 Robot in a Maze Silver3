
# 문제 : https://www.acmicpc.net/problem/9311

# keyPoint
# 1. BFS 탐색을 이용하여 풀이
# 2. 가중치가 없는 경로찾기의 경우 BFS로 풀어야 함
# 3. 또한 가중치가 없는 경우 먼저 탐색하는 노드는 최단거리가 된다!

# code
from sys import stdin
from collections import deque

t = int(input())

for _ in range(t) :
    r, c = map(int, stdin.readline().split())   # 입력

    graph = []  # 그래프
    visited = [[0 for _ in range(c)] for _ in range(r)] # 방문 여부

    st_x, st_y = 0, 0   # 시작점의 좌표
    
    # 방향 벡터
    dx = [-1, 0, 1, 0]
    dy = [0, 1, 0, -1]
    
    queue = deque() # BFS를 위한 큐
    
    
    for i in range(r) :
        tmp = list(map(str, stdin.readline().strip()))  #입력
        
        if "S" in tmp : # 시작점을 포함한 경우
            st_x, st_y = i, tmp.index("S")  # 시작점의 좌표
            
        graph.append(tmp)
        
    queue.append((st_x, st_y))  # 큐에 시작점 넣기
    
    while queue :
        num = queue.popleft()   # 탐색할 노드
        
        # 노드가 목표지점일 경우
        if graph[num[0]][num[1]] == "G" :
            print(f"Shortest Path: {visited[num[0]][num[1]]}")
            
            break
        
        for i in range(4) :
            tx, ty = num[0] + dx[i], num[1] + dy[i] # 인접 노드 좌표
            
            # 1. 좌표가 범위 안에 있고
            # 2. 방문하지 않은 노드이면서
            # 3. 장애물이 아닐 경우
            if tx >= 0 and ty >= 0 and tx < r and ty < c and visited[tx][ty] == 0 and graph[tx][ty] != "X" :
                queue.append((tx, ty))  # 인접한 노드 큐에 추가
                
                visited[tx][ty] = visited[num[0]][num[1]] + 1   # 이전 노드의 경로 +1
    else :
        print("No Exit")
        
    
    
