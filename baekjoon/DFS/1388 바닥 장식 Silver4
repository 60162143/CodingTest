
# 문제 : https://www.acmicpc.net/problem/1388

# keyPoint
# 1. 길이가 1인 인접행렬에서 오른쪽 또는 왼쪽으로 진행하면서 DFS 탐색
# 2. 탐색을 하는 특정 조건('-' or '|'를 찾는 조건)이 존재하기 때문에 DFS를 해야 함

# code 
from sys import stdin

# 바닥 장식 DFS
def dfs(x, y, shape) :
    # 탐색 방향이 오른쪽 또는 아래쪽이기 때문에 범위보다 클 경우 False Return
    if x >= n or y >= m :
        return False
    
    if floor[x][y] == '-' and shape == '-':  # 현재 바닥 장식 모양과 기준점의 바닥장식 모두 '-'일 경우
        floor[x][y] = '0'  # 방문 시 '0'으로 갱신
        dfs(x, y + 1, shape)  # 오른쪽 방향의 바닥 장식 탐색
        return True  # 방문 완료 시 True Return
    elif floor[x][y] == '|' and shape == '|':  # 현재 바닥 장식 모양과 기준점의 바닥장식 모두 '|'일 경우
        floor[x][y] = '0' # 방문 시 '0'으로 갱신
        dfs(x + 1, y, shape)  # 아래쪽 방향의 바닥 장식 탐색
        return True  # 방문 완료 시 True Return
        
    return False  # 바닥 장식을 이미 탐색했을 경우 False Return

n, m = map(int, stdin.readline().split())  # n, m 입력
floor = [list(stdin.readline().rstrip()) for _ in range(n)]  # 바닥 장식 종류 입력
result = 0  # 결과값

# 바닥장식을 모든 정점을 한번씩 탐색
for i in range(n) :
    for j in range(m) :
        # 이어져있는 바닥 장식을 모두 방문했을 경우
        if dfs(i, j, floor[i][j]) == True :
            result += 1  # 바닥장식 갯수 증가
            
print(result)
