
# 문제 : https://www.acmicpc.net/problem/2468

# keyPoint
# 1. 기존의 조건을 탐색하는 문제였다면 이 문제는 물이 차는 곳의 탐색이 아닌 물이 차지 않은 안전 지대를 탐색하는 문제
# 2. 파이썬의 재귀 깊이는 1000으로 sys.setrecursionlimit(10**6)으로 재귀 깊이를 임의로 늘려줘야 함

# code
#################### DFS ####################
import sys
from sys import stdin

sys.setrecursionlimit(10**6)  # 재귀 깊이를 임의로 늘림

# DFS 탐색
def dfs(x, y, z) :
    
    visited[x][y] = 1  # 탐색된 현재 좌표 방문 처리

    # 상, 하, 좌, 우 방향으로 확인
    for i in range(4) :
        # 인접한 좌표
        nx = x + dx[i]
        ny = y + dy[i]
        
        if nx < 0 or ny < 0 or nx >= n or ny >= n :  # 인접한 좌표가 범위를 벗어난 경우 continue
            continue

        # 인접한 좌표가 방문 되지 않고 물에 잠기지 않은 경우 DFS 탐색 재귀 호출
        if visited[nx][ny] == 0 and graph[nx][ny] >= z:
            dfs(nx, ny, z)
        
    return 1  # 탐색을 완료한 경우 안전 지역이 1개 생기기 때문에 1 return

n = int(stdin.readline())  # n 입력

graph = [list(map(int, stdin.readline().split())) for _ in range(n)]  # 지역의 높이 입력

# 방향 벡터
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

result = 0  # 결과 값

for k in range(1, 100) :  # 물의 높이가 1 ~ 100 사이의 범위를 모두 탐색
    visited = [[0 for _ in range(n)] for _ in range(n)]  # 각 좌표의 방문 여부
    count = 0  # 현재 물높이에서의 안전 지역 수
    for i in range(n) :
        for j in range(n) :
            # 현재 좌표의 지역이 안전지역이고 방문하지 않았을 경우
            if graph[i][j] >= k and visited[i][j] == 0:
                count += dfs(i, j, k)  # DFS 탐색 후 안전지역수 증가
       
    result = max(result, count)  # 현재 물높이의 안전지역수와 이전 물높이까지의 안전지역 수의 최대값
    
print(result)
#################### DFS ####################

#################### BFS ####################
# import sys
# from sys import stdin
# from collections import deque

# BFS 탐색
# def bfs(x, y, z) :
    
#     queue = deque()  # BFS 탐색을 위한 queue
#     queue.append((x, y))  # queue에 시작 좌표 값 삽입
#     visited[x][y] = 1  # 현재 좌표 방문 처리

      # queue가 빌때까지 반복
#     while queue :
#         tx, ty = queue.popleft()  # queue의 맨 앞에 있는 값 pop

          # 상, 하, 좌, 우 4 방향 확인
#         for i in range(4) :
              # 인접 좌표
#             nx = tx + dx[i]
#             ny = ty + dy[i]

              # 인접 좌표가 범위를 벗어난 경우 continue
#             if nx < 0 or ny < 0 or nx >= n or ny >= n :
#                 continue

              # 인접 좌표가 방문되지 않았고 물에 잠기지 않은 경우
#             if visited[nx][ny] == 0 and graph[nx][ny] >= z:
#                 queue.append((nx, ny))  # queue에 인접 좌표 삽입
#                 visited[nx][ny] = 1  # 인접 좌표 방문 처
        
#     return 1

# n = int(stdin.readline())

# graph = [list(map(int, stdin.readline().split())) for _ in range(n)]
# dx = [-1, 0, 1, 0]
# dy = [0, 1, 0, -1]
# result = 0

# for k in range(1, 100) :
#     visited = [[0 for _ in range(n)] for _ in range(n)]
#     count = 0
#     for i in range(n) :
#         for j in range(n) :
#             if graph[i][j] >= k and visited[i][j] == 0:
#                 count += bfs(i, j, k)
       
#     result = max(result, count)
    
# print(result)
#################### BFS ####################
