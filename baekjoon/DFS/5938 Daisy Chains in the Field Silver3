
# 문제 : https://www.acmicpc.net/problem/5938

# keyPoint 

# code
########## DFS ##########
from sys import stdin

# DFS 재귀 함수
def dfs(x) :
    visited[x] = 1  # 현재 노드 방문 처리

    # 현재 노드와 연결되어 있는 노드 확인
    for dx in graph[x] :
        if visited[dx] == 0 :  # 연결된 노드가 방문 안되었을 경우
            dfs(dx)  # 연결된 노드로 DFS 탐색

n, m = map(int, stdin.readline().split())

graph = [[] for _ in range(n + 1)]  # 그래프
visited = [0 for _ in range(n + 1)]  # 방문 여부

for i in range(m) :
    x, y = map(int, stdin.readline().split())
    # 양방향 연결
    graph[x].append(y)
    graph[y].append(x)
    
dfs(1)  # 1번 노드부터 DFS 탐색

if sum(visited) == n :  # 모든 노드를 방문 했을 경우
    print(0)
else :
    for i in range(1, n + 1) :
        if visited[i] == 0 :
            print(i)
########## DFS ##########

########## BFS ##########
# from sys import stdin
# from collections import deque

# n, m = map(int, stdin.readline().split())

# graph = [[] for _ in range(n + 1)]
# visited = [0 for _ in range(n + 1)]

# for i in range(m) :
#     x, y = map(int, stdin.readline().split())
#     graph[x].append(y)
#     graph[y].append(x)

# queue = deque([1])  # BFS 탐색을 위한 queue
# visited[1] = 1  # 첫번째 노드 방문

# queue가 빌때까지 BFS 탐색
# while queue :
#     x = queue.popleft()  # queue의 맨 앞의 값 pop

      # 현재 노드와 연결되어 있는 노드 확인
#     for dx in graph[x] :
#         if visited[dx] == 0 :  # 연결된 노드가 방문 안되어 있을 경우
#             queue.append(dx)  # 연결된 노드 queue에 삽입
#             visited[dx] = 1  # 연결된 노드 방문 처

# if sum(visited) == n :
#     print(0)
# else :
#     for i in range(1, n + 1) :
#         if visited[i] == 0 :
#             print(i)
########## BFS ##########
