
# 문제 : https://www.acmicpc.net/problem/2178

# keyPoint :
# 1. 최단, 최소 거리를 구하는 경우 BFS가 효율적

# code
from sys import stdin
from collections import deque

# BFS 탐색
def bfs(x, y) :
    queue = deque([(x, y)])  # 현재 좌표 queue에 삽입

    # queue가 빌때까지 반복
    while queue :
        nx, ny = queue.popleft()  # 큐의 값 꺼내기

        # 좌표가 오른쪽 맨 아래 좌표일 경우 break
        if nx == n - 1 and ny == m - 1 :
            break

        # 상, 하, 좌, 우 방향 확인
        for i in range(4) :
            # 인접 좌표
            tx = nx + dx[i]
            ty = ny + dy[i]

            # 인접 좌표가 범위를 벗어난 경우
            if tx < 0 or ty < 0 or tx >= n or ty >= m :
                continue

            # 이동할 수 있는 곳인 경우
            if map[tx][ty] == 1 :
                queue.append((tx, ty))  # 인접 좌표 queue에 삽입

                # 인접 좌표까지의 거리를 이전 좌표값에서 더한 값으로 증가
                # 다음 좌표까지의 거리를 계산하면서 마지막 좌표까지 계산
                # BFS는 최단 거리를 보장하기 때문
                # map[tx][ty] = map[nx][ny] + 1   < == 이것도 가능함
                map[tx][ty] += map[nx][ny]
                
    return map[n - 1][m - 1]  # 마지막 좌표의 값을 return
    

n, m = map(int, stdin.readline().split())

map = [list(map(int, stdin.readline().rstrip())) for _ in range(n)]

# 방향 벡
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

print(bfs(0, 0))
