
# 문제 : https://www.acmicpc.net/problem/6221

# keyPoint
# 1. dp를 이용하여 길이의 최대값을 갱신하며 적용
# 2. 이분탐색을 이용하면 좀더 빠르게 풀 수 있지만 이 문제는 dp를 사용하는게 나을지도...?

# code
from sys import stdin

n = int(input())    # 입력
arr = []    # 건초 리스트

# 수열의 최대 길이를 담을 dp 리스트
# 최소 길이는 1이므로 1로 초기화
dp = [1 for _ in range(n)]  

# 입력
for _ in range(n) :
    x, y = map(int, stdin.readline().split())
    arr.append((x, y))
    
arr.sort(key=lambda x:(x[0], x[1])) # 탐색을 위한 정렬

for i in range(n) :
    for j in range(i) :
        # 현재의 값이 기준점의 값보다 작을 경우
        if arr[j][0] < arr[i][0] and arr[j][1] < arr[i][1] :
            # 기준점의 dp값을 현재 위치까지의 dp값에 1을 증가하여 갱신
            # 즉, 기준점보다 작을 경우 갱신하면서 최대값 찾기
            dp[i] = max(dp[i], dp[j] + 1)

print(max(dp))
