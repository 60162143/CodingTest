
# 문제 : https://www.acmicpc.net/problem/2751

# keyPoint
# 1. 합병정렬의 시간복잡도는 O(nlogn)
# 2. n의 범위가 1000000만 까지의 경우 O(nlogn) 까지 가능 -> log(1000000) 이 약 20인데
# 파이썬이 약 2천만번의 연산을 수행할 수 있기 때문
# 3. 함수 사용 시 파라미터로 list or dict가 올 경우 mutable(변경가능한) 객체 이기 때문에 
# 함수 내에서 함수 밖에 있는 파라미터를 변경하면 밖에 있는 list or dict도 변경 됨

# code
from sys import stdin

# 병합 하는 과정
def merge(lst, left, right, end) :
    merged = []  # 정렬된 리스트를 담을 그릇
    
    lt, rt = left, right  # left는 왼쪽 리스트의 시작점, right는 오른쪽 리스트의 시작점

    # 왼쪽 리스트의 시작점이 오른쪽 리스트의 시작점보다 작고
    # 오른쪽 리스트의 시작점이 마지막 index보다 작거나 같아야 반복
    while lt < right and rt <= end :
        if lst[lt] <= lst[rt] :  # 왼쪽 리스트의 pivot 값이 오른쪽 리스트의 pivot값보다 작은 경우
            merged.append(lst[lt])  # 왼쪽 리스트의 pivot 값 삽입
            lt += 1  # 왼쪽 리스트의 피벗 인덱스 증가
        else :  # 왼쪽 리스트의 pivot 값이 오른쪽 리스트의 pivot값보다 큰 경우
            merged.append(lst[rt])  # 오른쪽 리스트의 pivot 값 삽입
            rt += 1  # 오른쪽 리스트의 피벗 인덱스 증가

    # 왼쪽 리스트의 값이 남았을 경우 남은 수들을 모두 삽입
    while lt < right :
        merged.append(lst[lt])
        lt += 1

    # 오른쪽 리스트의 값이 남았을 경우 남은 수들을 모두 삽입
    while rt <= end :
        merged.append(lst[rt])
        rt += 1

    idx = left  # 정렬을 시작한 시작점의 인덱스

    # 정렬된 리스트를 원래의 리스트에 시작점부터 끝점까지 값 변경하기
    # 원래의 리스트의 값을 직접 변경함으로써 메모리 낭비를 줄임
    # 파라미터로 받은 리스트를 함수내에서 수정해서 원래 리스트의 값을 직접 변경할 수 있음
    for i in merged :
        lst[idx] = i
        idx += 1

# 정렬할 리스트를 반으로 계속 쪼개기
def mergeSort(lst, st, ed) :
    if st >= ed :  # 쪼개진 리스트가 1개 이하일 경우 종료
        return
    
    mid = (st + ed) // 2  # 중간 인덱스 계산
    mergeSort(lst, st, mid)  # 중간 인덱스를 기준으로 왼쪽에 있는 리스트
    mergeSort(lst, mid + 1, ed)  # 중간 인덱스를 기준으로 오른쪽에 있는 리스트
    merge(lst, st, mid + 1, ed)  # 쪼갠 리스트를 합치기

n = int(stdin.readline())  # n 입력

arr = [int(stdin.readline()) for _ in range(n)]  # 리스트에 수 입력

mergeSort(arr, 0, len(arr) - 1)  # 병합 정렬 진행

for i in arr :
    print(i)
