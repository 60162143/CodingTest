
# 문제 : https://www.acmicpc.net/problem/7795

# keyPoint
# 1. 이분 탐색을 이용하는 문제
# 2. bisect 라이브러리는 원소들이 정렬된 리스트에서 특정 원소를 찾을 때 효과적
# 3. 두 리스트 모두 정렬 후 b의 원소를 하나씩 확인하면서 a리스트의 start 인덱스로 비교하면서 결과값 도출 가능!

# code
from sys import stdin
from bisect import bisect_right

t = int(stdin.readline())  # 입력

for _ in range(t) :
    # 입력
    n, m = map(int, stdin.readline().split())
    
    arrA = sorted(list(map(int, stdin.readline().split())))  # 이분 탐색을 위해 정렬 진행
    arrB = list(map(int, stdin.readline().split()))
    
    result = 0   # 결과 값

    # arrB의 item을 arrA에 들어갈 위치를 찾으면 그 위치부터 배열 끝까지가 쌍을 만들수 있는 경우의 수
    for item in arrB :
        result += len(arrA) - bisect_right(arrA, item)  # bisect_right 함수를 사용하여 배열에 원소가 들어갈 위치 탐색
        
    print(result)

####################### 2번 풀이 ##################################
from sys import stdin

t = int(input())

for _ in range(t) :
    n, m = map(int, stdin.readline().split())   # 입력
    
    # 이분탐색을 위한 정렬
    a = sorted(list(map(int, stdin.readline().split())))
    b = sorted(list(map(int, stdin.readline().split())))
    
    answer = 0  # 결과값
    
    start = 0   # a 리스트의 시작 인덱스
    
    # b의 원소를 한개씩 확인
    for item in b :
        # 시작 인덱스의 값을 기준으로 비교
        while start < len(a) :
            if a[start] <= item :   # b의 값의 a의 start인덱스 값보다 크거나 같을 경우
                start += 1  # 결과값에 포함될 수 없기 떄문에 인덱스 증가
                
            # b의 값의 a의 start인덱스 값보다 작을 경우 값에 포함됨 
            # 즉 a 리스트의 start인덱스 기준으로 오른쪽에 있는 값은 모두 결과값에 포함됨
            else :  
                answer += len(a) - start
                break
                
    print(answer)
