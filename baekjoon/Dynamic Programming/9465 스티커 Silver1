
# 문제 : https://www.acmicpc.net/problem/9465

# keyPoint
# 1. dp를 1열과 2열로 나눠서 계산
# 2. 현재 위치 i를 기준으로 dp[0][i - 1]과 현재점 + dp[1][i - 1]의 최댓값으로 갱신
# 3. 대각선으로 오는 값과 현재점의 왼쪽의 값의 최댓값으로 갱신하므로 현재점까지의 최대값 계산( 마지막 점을 사용할수도, 안할 수도 있음 )

# code
from sys import stdin

t = int(stdin.readline())  # 입력

for _ in range(t) :
    # 입력
    n = int(stdin.readline())
    sticker = [list(map(int, stdin.readline().split())) for _ in range(2)]
    
    dp = [[0 for _ in range(n)] for _ in range(2)]  # dp
    
    dp[0][0], dp[1][0] = sticker[0][0], sticker[1][0]  # 시작점 대입

    # 리스트 순회
    for i in range(1, n) :
        for j in range(2) :  # 1열, 2열 각각 계산
            # 현재값과 대각선에서 오는값과, 현재점의 왼쪽까지의 최대값이 최대값으로 갱신
            dp[j][i] = max(dp[j][i - 1], sticker[j][i] + dp[abs(j - 1)][i - 1])
            
    print(max(dp[0][n - 1], dp[1][n - 1]))
