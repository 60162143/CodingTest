
# 문제 : https://www.acmicpc.net/problem/2156

# keyPoint
# 1. 세잔이 연속될 수 없으므로 될수 있는 경우의 수의 최댓값 계산
# ( 현재잔 + 한칸 앞의 잔 + 세칸 앞의 최대값(dp) or 현재잔 + 두칸 앞의 최대값(dp) or 한칸 앞의 최대값(dp) )


# code
from sys import stdin

# 입력
n = int(stdin.readline())
g = [int(stdin.readline()) for _ in range(n)]

dp = [0 for _ in range(n)]  # dp

dp[0] = g[0]  # 0번째 값
for i in range(1, n) :
    if i == 1 :  # 두 잔이 연속하는 경우가 최대
        dp[i] = g[i - 1] + g[i]
    elif i == 2 :  # 세 잔중 두 잔의 합이 최대가 되는경우가 최대값
        dp[i] = max(dp[i - 1], g[i] + max(g[ : i]))
    else :  # (현재잔 + 한 칸 앞의 잔 + 세칸 앞의 최대값 or 현재잔 + 두칸 앞의 최대값(dp) or 한칸 앞의 최대값(dp)) 의 최대값
        dp[i] = max(g[i] + g[i - 1] + dp[i - 3], g[i] + dp[i - 2], dp[i - 1])

print(max(dp))
