
# 문제 : https://www.acmicpc.net/problem/18352

# keyPoint
# 1. 다익스트라 알고리즘을 이용한 길찾기 문제

# code
from sys import stdin
import sys
from heapq import heappop, heappush

# 입력
N, M, K, X = map(int, stdin.readline().split())

graph =[[] for _ in range(N + 1)]  # 각 노드에 연결된 노드 리스트
distance = [sys.maxsize for _ in range(N + 1)]  # 각 정점까지의 최단 거리, 큰값으로 초기화

# 연결된 노드 입력
for _ in range(M) :
    x, y = map(int, stdin.readline().split())
    
    graph[x].append((1, y))  # 거리는 1로 고정, 거리와 연결 노드 정점 노드 리스트에 추가
    
queue = []  # 우선순위 큐(min heap)
heappush(queue, (0, X))  # 큐에 시작점의 거리와 시작점 삽입(시작점의 거리는 0으로 초기화)
distance[X] = 0  # 시작점까지의 최단거리는 0이므로 0 삽입

# 큐가 빌때까지 반복
while queue :
    dist, item = heappop(queue)  # 현재 정점과 정점까지의 최단 거리 pop

    # 처리된 적이 있는 노드일 경우 무시
    if distance[item] < dist :
        continue
    
    for di, it in graph[item] :   # 연결된 노드와 연결된 인접한 노드 확인
        cost = dist + di  # 현재 노드를 거쳐서 인접 노드로 가는 경우

        # 인접 노드의 최단거리가 현재 노드를 거쳐 인접노드로 가는 거리보다 클 경우
        # 즉 현재 노드를 거쳐 가는 길이가 더 짧을 경우
        if distance[it] > cost :
            distance[it] = cost  # 최단 거리 갱신
            heappush(queue, (cost, it))  # 큐에 인접 정점과 최단 거리 삽입
     
result = []  # 결과 리스트
for i in range(1, N + 1) :
    if distance[i] == K :  # 최단거리를 비교하여 결과리스트에 저장, 오름차순으로 정렬하기 위해 heap 자료구조 사용
        heappush(result, i)

        
if len(result) == 0 :
    print(-1)
else :
    while result :
        print(heappop(result))
