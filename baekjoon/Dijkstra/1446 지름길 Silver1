
# 문제 : https://www.acmicpc.net/problem/1446

# 아이디어
# 1. 0번 노드부터 D번 노드까지 존재한다고 가정하고 문제풀이 시작
# 2. i번 노드에서 i+1번 노드까지 가는 거리를 1로 모든 노드 초기화
# 3. 입력 받은 지름길을 인접 노드 리스트에 추가
# 4. 다익스트라 알고리즘을 이용하요 0번노드를 시작으로 모든 경로의 최단거리 찾기 진행
 
# 한계 
# 1. 다익스트라 알고리즘으로 문제 해결방법이 떠오르지 않아 dp를 이용하여 문제해결을 함
# 2. 다익스트라 알고리즘의 구조 외우기!!
# 3. index의 범위를 잘못 지정하여 99%에서 index Error가 나왔다.. 범위를 꼭 확인하고 문제를 꼼꼼히 읽을것

# code 
from sys import stdin
from heapq import heappop, heappush

INF = int(1e9)  # 1e9는 약 10억을 나타냄 최대값이 10억 미만이 될 경우 사용하자

# 입력
N, D = map(int, stdin.readline().split())

graph = [[] for _ in range(D + 1)]  # 인접 노드 리스트
distance = [INF for _ in range(D + 1)]  # 최단 거리

# 0번 노드부터 i -> i+1의 거리를 1로 해서 삽입
for i in range(D) : 
    graph[i].append((i + 1, 1))

# 인접 노드(지름길) 정보 입력
for _ in range(N) :
    s, e, l = map(int, stdin.readline().split())

    if e <= D :  # 끝 노드가 D보다 작거나 같을 경우만 인접 노드 리스트에 삽입( index Error 방지 )
        graph[s].append((e, l))

queue = []  # 우선순위 큐
heappush(queue, (0, 0))  # 큐에 시작점을 0, 거리를 0으로 하는 노드 정보 삽입
distance[0] = 0  # 0번 노드의 최단거리를 0으로 초기화

while queue :
    item, dist = heappop(queue)  # 인접 노드 정보

    # 이미 처리된 적이 있는 노드 무시(큐에 들어온 값이 무조건 최소 값이 아님)
    if dist > distance[item] :
        continue
    
    for it, di in graph[item] :  # 인접 노드 정보
        cost = dist + di  # 현재 노드를 거쳐서 인접노드로 가는 비용

        # 현재 노드를 거쳐 가는 비용이 더 작을 경우
        if cost < distance[it] :
            distance[it] = cost  # 인접 노드의 최단 거리 갱신
            heappush(queue, (it, cost))  # 큐에 인접 노드 정보 삽입
            
print(distance[D])

# dp로 해결

# 아이디어
# 1. 초기 dp의 값을 0으로 초기화 한 뒤 지름길 정보 입력
# 2. 0번 노드부터 인접한 지름길이 있는 경우 도착지점의 dp값을 최소값으로 갱신
# 3. 다음 노드의 dp값을 해당 위치의 최소값과 현재 위치의 dp값 +1의 최소값으로 갱신
# 4. 1칸씩 이동할 수도 있고 지름길을 이용할 수도 있기 때문
# 5. dp의 점화식 dp[i + 1] = min(dp[i + 1], dp[i] + 1) 이용 

# from sys import stdin
# import sys

# N, D = map(int, stdin.readline().split())

# graph = [[] for _ in range(D + 1)]
# dp = [sys.maxsize for _ in range(D + 1)]

# for _ in range(N) :
#     x, y, z = map(int, stdin.readline().split())
    
#     if x <= D :
#         graph[x].append((y, z))

# dp[0] = 0
# for i in range(D) :
    
#     for item, dist in graph[i] :
#         if item > D :
#             continue
#         dp[item] = min(dp[i] + dist, dp[item])
      
#     dp[i + 1] = min(dp[i + 1], dp[i] + 1)
    
# print(dp[D])
